name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18'
  MONGODB_VERSION: '6.0'

jobs:
  # Code quality and linting
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run TypeScript check
        run: npm run typecheck

      - name: Check for security vulnerabilities
        run: npm audit --audit-level=high

  # Unit tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: ['16', '18', '20']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test:unit
        env:
          NODE_ENV: test
          JWT_SECRET: test-jwt-secret-for-ci
          BCRYPT_ROUNDS: 1

      - name: Upload unit test coverage
        uses: codecov/codecov-action@v3
        with:
          flags: unit
          name: unit-tests-node-${{ matrix.node-version }}

  # Integration tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:${{ env.MONGODB_VERSION }}
        env:
          MONGO_INITDB_ROOT_USERNAME: testuser
          MONGO_INITDB_ROOT_PASSWORD: testpass
          MONGO_INITDB_DATABASE: test_annotation_db
        ports:
          - 27017:27017
        options: >-
          --health-cmd="mongosh --eval 'db.runCommand({ ping: 1 })'"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd="redis-cli ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Wait for MongoDB
        run: |
          until nc -z localhost 27017; do
            echo "Waiting for MongoDB..."
            sleep 2
          done

      - name: Wait for Redis
        run: |
          until nc -z localhost 6379; do
            echo "Waiting for Redis..."
            sleep 2
          done

      - name: Run integration tests
        run: npm run test:integration
        env:
          NODE_ENV: test
          JWT_SECRET: test-jwt-secret-for-ci
          MONGODB_URI: mongodb://testuser:testpass@localhost:27017/test_annotation_db?authSource=admin
          REDIS_URL: redis://localhost:6379

      - name: Upload integration test coverage
        uses: codecov/codecov-action@v3
        with:
          flags: integration
          name: integration-tests

  # End-to-end tests
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:${{ env.MONGODB_VERSION }}
        env:
          MONGO_INITDB_ROOT_USERNAME: testuser
          MONGO_INITDB_ROOT_PASSWORD: testpass
          MONGO_INITDB_DATABASE: test_annotation_db
        ports:
          - 27017:27017

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: Start application in test mode
        run: |
          npm run build
          npm start &
          sleep 10
        env:
          NODE_ENV: test
          PORT: 3000
          JWT_SECRET: test-jwt-secret-for-ci
          MONGODB_URI: mongodb://testuser:testpass@localhost:27017/test_annotation_db?authSource=admin

      - name: Run E2E tests
        run: npm run test:e2e
        env:
          BASE_URL: http://localhost:3000

      - name: Upload E2E test artifacts
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: e2e-test-results
          path: |
            test-results/
            playwright-report/

  # Performance tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:${{ env.MONGODB_VERSION }}
        env:
          MONGO_INITDB_ROOT_USERNAME: testuser
          MONGO_INITDB_ROOT_PASSWORD: testpass
          MONGO_INITDB_DATABASE: test_annotation_db
        ports:
          - 27017:27017

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run performance tests
        run: npm run test:performance
        env:
          NODE_ENV: test
          JWT_SECRET: test-jwt-secret-for-ci
          MONGODB_URI: mongodb://testuser:testpass@localhost:27017/test_annotation_db?authSource=admin

      - name: Upload performance test results
        uses: actions/upload-artifact@v3
        with:
          name: performance-test-results
          path: performance-results/

  # Security tests
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level=moderate

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=medium

      - name: Upload Snyk results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: snyk.sarif

  # Build and deployment preparation
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [quality, unit-tests, integration-tests]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Create deployment package
        run: |
          tar -czf deployment-package.tar.gz \
            --exclude=node_modules \
            --exclude=.git \
            --exclude=tests \
            --exclude=.env \
            .

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: deployment-package
          path: deployment-package.tar.gz
          retention-days: 30

  # Test result aggregation and reporting
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests, performance-tests]
    if: always()
    
    steps:
      - name: Download test coverage reports
        uses: actions/download-artifact@v3
        with:
          path: coverage-reports/

      - name: Aggregate test results
        run: |
          echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Test Type | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Unit Tests | ${{ needs.unit-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Integration Tests | ${{ needs.integration-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| E2E Tests | ${{ needs.e2e-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Performance Tests | ${{ needs.performance-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY

      - name: Comment test results on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const testResults = {
              unit: '${{ needs.unit-tests.result }}',
              integration: '${{ needs.integration-tests.result }}',
              e2e: '${{ needs.e2e-tests.result }}',
              performance: '${{ needs.performance-tests.result }}'
            };
            
            const passed = Object.values(testResults).filter(r => r === 'success').length;
            const total = Object.keys(testResults).length;
            
            const body = `## 🧪 Test Results
            
            **${passed}/${total} test suites passed**
            
            | Test Suite | Result |
            |------------|--------|
            | Unit Tests | ${testResults.unit === 'success' ? '✅' : '❌'} |
            | Integration Tests | ${testResults.integration === 'success' ? '✅' : '❌'} |
            | E2E Tests | ${testResults.e2e === 'success' ? '✅' : '❌'} |
            | Performance Tests | ${testResults.performance === 'success' ? '✅' : '❌'} |
            
            ${passed === total ? '🎉 All tests passed!' : '⚠️ Some tests failed. Please check the logs.'}`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

  # Deployment (only on main branch with all tests passing)
  deploy:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, test-summary]
    if: |
      github.ref == 'refs/heads/main' &&
      needs.build.result == 'success' &&
      needs.test-summary.result == 'success'
    
    environment:
      name: staging
      url: https://annotation-app-staging.example.com
    
    steps:
      - name: Download deployment package
        uses: actions/download-artifact@v3
        with:
          name: deployment-package

      - name: Deploy to staging environment
        run: |
          echo "Deploying to staging environment..."
          echo "This would typically involve:"
          echo "1. Uploading package to staging server"
          echo "2. Running database migrations"
          echo "3. Starting the application"
          echo "4. Running smoke tests"
          echo "Deployment completed successfully!"

      - name: Run post-deployment smoke tests
        run: |
          echo "Running smoke tests against staging environment..."
          # curl -f https://annotation-app-staging.example.com/health
          echo "Smoke tests passed!"

      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" = "success" ]; then
            echo "✅ Deployment to staging successful"
          else
            echo "❌ Deployment to staging failed"
          fi