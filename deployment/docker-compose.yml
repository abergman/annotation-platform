version: '3.8'

services:
  # PostgreSQL Database
  db:
    build:
      context: .
      dockerfile: deployment/docker/Dockerfile.db
    container_name: annotation-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-annotation}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=md5"
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./deployment/backup:/backup
      - ./deployment/scripts:/scripts
    ports:
      - "${DB_PORT:-5432}:5432"
    networks:
      - annotation_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-annotation}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: annotation-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - annotation_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Application Server
  app:
    build:
      context: .
      dockerfile: deployment/docker/Dockerfile
    container_name: annotation-app
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      DB_HOST: db
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-annotation}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD}
      REDIS_URL: redis://redis:6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      SESSION_SECRET: ${SESSION_SECRET}
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost}
    volumes:
      - app_uploads:/app/uploads
      - app_logs:/app/logs
    ports:
      - "${APP_PORT:-3000}:3000"
    networks:
      - annotation_network
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Nginx Reverse Proxy
  nginx:
    build:
      context: .
      dockerfile: deployment/nginx/Dockerfile
    container_name: annotation-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deployment/nginx/conf.d:/etc/nginx/conf.d
      - ./deployment/ssl:/etc/nginx/ssl
      - nginx_logs:/var/log/nginx
      - certbot_webroot:/var/www/certbot
    networks:
      - annotation_network
    depends_on:
      - app
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Certbot for SSL certificates
  certbot:
    image: certbot/certbot:latest
    container_name: annotation-certbot
    volumes:
      - ./deployment/ssl:/etc/letsencrypt
      - certbot_webroot:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: annotation-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./deployment/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - annotation_network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: annotation-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./deployment/monitoring/grafana:/etc/grafana/provisioning
    networks:
      - annotation_network

  # Log aggregation - Loki
  loki:
    image: grafana/loki:latest
    container_name: annotation-loki
    restart: unless-stopped
    ports:
      - "3100:3100"
    volumes:
      - ./deployment/monitoring/loki.yml:/etc/loki/local-config.yaml
      - loki_data:/loki
    networks:
      - annotation_network

  # Backup service
  backup:
    build:
      context: .
      dockerfile: deployment/backup/Dockerfile
    container_name: annotation-backup
    restart: unless-stopped
    environment:
      DB_HOST: db
      DB_NAME: ${DB_NAME:-annotation}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD}
      BACKUP_SCHEDULE: ${BACKUP_SCHEDULE:-0 2 * * *}
      S3_BUCKET: ${S3_BACKUP_BUCKET}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
    volumes:
      - ./deployment/backup:/backup
      - db_backup:/db_backup
    networks:
      - annotation_network
    depends_on:
      - db

volumes:
  db_data:
    driver: local
  redis_data:
    driver: local
  app_uploads:
    driver: local
  app_logs:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local
  db_backup:
    driver: local
  certbot_webroot:
    driver: local

networks:
  annotation_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16